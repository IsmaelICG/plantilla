import { useState, useEffect } from 'react';
import { Table } from './components/moleculis/Table/Table.component';
import { Input } from './components/atoms/Input/Input.component';
import { Button } from './components/atoms/Button/Button.component';
import { CardLayout } from './components/layout/CardLayout.component';
import { WeatherCard } from './components/layout/WeatherCard.component';
import { Logo } from './components/atoms/Logo/Logo.components';

const url = 'https://api.weatherapi.com/v1/current.json?key=785e1a1b7a7b4497a5775633231307&q=Cáceres&aqi=no'

// Generated by https://quicktype.io

export interface Weather {
  location: Location;
  current: Current;
  forecast: Forecast;
}

export interface Current {
  last_updated_epoch: number;
  last_updated: string;
  temp_c: number;
  temp_f: number;
  is_day: number;
  condition: Condition;
  wind_mph: number;
  wind_kph: number;
  wind_degree: number;
  wind_dir: WindDir;
  pressure_mb: number;
  pressure_in: number;
  precip_mm: number;
  precip_in: number;
  humidity: number;
  cloud: number;
  feelslike_c: number;
  feelslike_f: number;
  vis_km: number;
  vis_miles: number;
  uv: number;
  gust_mph: number;
  gust_kph: number;
}

export interface Condition {
  text: Text;
  icon: Icon;
  code: number;
}

export enum Icon {
  CDNWeatherapiCOMWeather64X64Day113PNG = "//cdn.weatherapi.com/weather/64x64/day/113.png",
  CDNWeatherapiCOMWeather64X64Night113PNG = "//cdn.weatherapi.com/weather/64x64/night/113.png",
  CDNWeatherapiCOMWeather64X64Night116PNG = "//cdn.weatherapi.com/weather/64x64/night/116.png",
  CDNWeatherapiCOMWeather64X64Night122PNG = "//cdn.weatherapi.com/weather/64x64/night/122.png",
}

export enum Text {
  Clear = "Clear",
  Overcast = "Overcast",
  PartlyCloudy = "Partly cloudy",
  Sunny = "Sunny",
}

export enum WindDir {
  Nnw = "NNW",
  Nw = "NW",
  Sw = "SW",
  W = "W",
  Wnw = "WNW",
  Wsw = "WSW",
}

export interface Forecast {
  forecastday: Forecastday[];
}

export interface Forecastday {
  date: string;
  date_epoch: number;
  day: Day;
  astro: Astro;
  hour: Hour[];
}

export interface Astro {
  sunrise: string;
  sunset: string;
  moonrise: string;
  moonset: string;
  moon_phase: string;
  moon_illumination: string;
  is_moon_up: number;
  is_sun_up: number;
}

export interface Day {
  maxtemp_c: number;
  maxtemp_f: number;
  mintemp_c: number;
  mintemp_f: number;
  avgtemp_c: number;
  avgtemp_f: number;
  maxwind_mph: number;
  maxwind_kph: number;
  totalprecip_mm: number;
  totalprecip_in: number;
  totalsnow_cm: number;
  avgvis_km: number;
  avgvis_miles: number;
  avghumidity: number;
  daily_will_it_rain: number;
  daily_chance_of_rain: number;
  daily_will_it_snow: number;
  daily_chance_of_snow: number;
  condition: Condition;
  uv: number;
}

export interface Hour {
  time_epoch: number;
  time: string;
  temp_c: number;
  temp_f: number;
  is_day: number;
  condition: Condition;
  wind_mph: number;
  wind_kph: number;
  wind_degree: number;
  wind_dir: WindDir;
  pressure_mb: number;
  pressure_in: number;
  precip_mm: number;
  precip_in: number;
  humidity: number;
  cloud: number;
  feelslike_c: number;
  feelslike_f: number;
  windchill_c: number;
  windchill_f: number;
  heatindex_c: number;
  heatindex_f: number;
  dewpoint_c: number;
  dewpoint_f: number;
  will_it_rain: number;
  chance_of_rain: number;
  will_it_snow: number;
  chance_of_snow: number;
  vis_km: number;
  vis_miles: number;
  gust_mph: number;
  gust_kph: number;
  uv: number;
}

export interface Location {
  name: string;
  region: string;
  country: string;
  lat: number;
  lon: number;
  tz_id: string;
  localtime_epoch: number;
  localtime: string;
}



const App = () => {

  const [apiData, setApiData] = useState<Weather | null>(null);
  const [location, setLocation] = useState<string>('Cáceres')

  useEffect(() => {
    (async () => {
      await fetchData();
    })();
  }, [])


  const fetchData = async (e?: React.FormEvent<HTMLFormElement>) => {

    e?.preventDefault();

    try {
      const response = await fetch(`https://api.weatherapi.com/v1/forecast.json?lang=es&key=785e1a1b7a7b4497a5775633231307&q=${location}&days=5&aqi=no&alerts=no`);
      const data = await response.json();
      setApiData(data);
    } catch (error) {
      console.log(error);
    }
  }

  return (
    <div className='h-screen w-screen flex flex-col justify-center items-center bg-black'>
      <div className='absolute top-2 '>
        <Logo height='64'/>
      </div>
      <CardLayout>
        <div className='flex flex-row justify-between w-full'>
          <div className='flex h-full flex-row justify-center items-center'>
            <h1 className='font-sans text-4xl text-white font-bold text-center'>{apiData?.location.name}</h1>
            <div>
              <h1 className='font-sans text-orange-200 font-semibold text-base'>{apiData?.location.country}</h1>
            </div>

          </div>
          <img src={apiData?.current.condition.icon} alt={apiData?.current.condition.text} />
        </div>
        <div className='flex w-full justify-center items-center'>
          <h2 className='font-sans text-6xl text-white font-bold text-center'>{apiData?.current.temp_c}º</h2>
        </div>
        <div className='flex flex-row w-full justify-between gap-4 overflow-x-auto'>
          {apiData?.forecast?.forecastday.map((day, index) => (<WeatherCard day={day} key={index} />))}
        </div>
        <form onSubmit={(e) => fetchData(e)}>
          <div className='flex flex-row justify-between w-full'>
            <div className='flex flex-col'>
              <Input value={location} onChange={(e) => setLocation(e.target.value)} labelText='Ciudad' textStyle='text-white' />
            </div>
            <div className='flex flex-col justify-end'>
              <Button text='Dime el tiempo' type='submit' />
            </div>
          </div>
        </form>
      </CardLayout>
      <div className='fixed w-screen'>
        <svg viewBox='0 0 1920 1920' className='absolute top-1/2 -z-10 h-[120rem] w-[120rem] [mask-image:radial-gradient(closest-side,white,transparent)] left-1/2 :ml-0 -translate-x-1/2 translate-y-0' aria-hidden='true'>
          <circle cx='960' cy='960' r='960' fill='url(#759c1415-0410-454c-8f7c-9a820de03641)' fill-opacity='0.6' />
          <defs>
            <radialGradient id='759c1415-0410-454c-8f7c-9a820de03641'>
              <stop stop-color='#7775D6' />
              <stop offset='1' stop-color='#E935C1' />
            </radialGradient>
          </defs>
        </svg>
      </div>

    </div>
  );
}

export default App